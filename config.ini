[Time]
# ms between screen updates
update_interval = 100

# ms between each pull operation (how frequent to ask for a data). 
# Since this viewer was purposed for low-latency display, the lower is usually better.
# However, ASR is affected by this, ASR will apply on currently avaialble data amount.
pull_interval = 100

# We show data only up to a timepoint shortly before the current time
# so new data doesn't suddenly appear in the middle of the plot.
# it is a fraction (of pull interval)
fudge_factor = 0.002

buffer_ratio = 10

[UI]
# fontsize for labels and pushbuttons
fontsize = 6.5pt
enable_highdpi_scaling=True

[Figure]
# ch_colors is cyclic (does not need to be 8)
ch_colors = white, red, gray, blue, yellow, green, cyan, MAGENTA
label_color = Gray
fontsize = 20px

# this decides how many channels per column in plots are allowed. 
# For example, if two streams together have channels larger than 
# the specified channels, the second stream will be added to a 
# second column on the main window. Otherwise, the second stream
# will be added as a second signal plot beneath the first plot.
channel_per_column = 9


[StreamNames]
# Specify which stream to receive
Names = EEG, EOG

[Stream_Channels]
# Added items (left-hand side) must have the same names as in [StreamNames]
# Each item specifies the name of each channel
# One can keep non-used stream by removing Names in [StreamNames]
EEG = Ch1, Ch2, Ch3, Ch4, Ch5, Ch6, Ch7, Ch8
EOG = EOG1, EOG2

[Stream_add_event_stream]
# Whether to show event (vertical line) on the plotted signals
EEG = True
EOG = False

[Stream_spacing]
# Spacing between each channel within a stream.
# This is only default value, one can still change on-the-fly after connecting to the streams.
EEG = 50
EOG = 100

[Stream_separate_channels]
# Whether to separate each channel by Stream_spacing
EEG = True
EOG = False

[Stream_yrange]
# this only works if Stream_separate_channels is FalseOR the number of channel is 1
EEG = -100, 100
EOG = -10, 10

[Stream_add_legend]
# True to add legend, generally only useful if Stream_separate_channels is False
EEG = False
EOG = False

[Stream_init_bandpass]
# low cutoff and high cutoff in Hz
# if both values are the same, bandpass is ignored
EEG = 3, 25
EOG = 0, 0

[Stream_init_bandstop]
# low cutoff and high cutoff in Hz
# if both values are the same, bandstop is ignored
EEG = 58, 62
EOG = 0, 0

[Stream_stretch_factor]
# integer only, used to adjust the size of plot window
# the size will be proportional to the value/(total value of that plotting column)
# if negative, it will use default value (channel count)
EEG = -1
EOG = -1

[ASR]
# The comments below are copied from the meegkit

# cutoff: float
#     Standard deviation cutoff for rejection. X portions whose variance
#     is larger than this threshold relative to the calibration data are
#     considered missing data and will be removed. The most aggressive value
#     that can be used without losing too much EEG is 2.5. A quite
#     conservative value would be 5 (default=5).
# blocksize : int
#     Block size for calculating the robust data covariance and thresholds,
#     in samples; allows to reduce the memory and time requirements of the
#     robust estimators by this factor (down to Channels x Channels x Samples
#     x 16 / Blocksize bytes) (default=10).
# win_len : float
#     Window length (s) that is used to check the data for artifact content.
#     This is ideally as long as the expected time scale of the artifacts but
#     not shorter than half a cycle of the high-pass filter that was used
#     (default=1).
# win_overlap : float
#     Window overlap fraction. The fraction of two successive windows that
#     overlaps. Higher overlap ensures that fewer artifact portions are going
#     to be missed, but is slower (default=0.66).
# max_dropout_fraction : float
#     Maximum fraction of windows that can be subject to signal dropouts
#     (e.g., sensor unplugged), used for threshold estimation (default=0.1).
# min_clean_fraction : float
#     Minimum fraction of windows that need to be clean, used for threshold
#     estimation (default=0.25).
# method : {'riemann', 'euclid'}
#     If riemann, use the riemannian-modified version of
# estimator : str in {'scm', 'lwf', 'oas', 'mcd'}
#     Covariance estimator (default: 'scm' which computes the sample
#     covariance). Use 'lwf' if you need regularization (requires pyriemann).

# for training only
bandpass_low = 4
bandpass_high = 30
blocksize = 100
win_len = 0.25 
win_overlap = 0.66
max_dropout_fraction = 0.25
min_clean_fraction = 0.25

# for both training and online processing
cutoff = 0.5
method = euclid
estimator = scm